mild.threshold.lower = mild.threshold.lower, mild.threshold.upper = mild.threshold.upper,
extreme.threshold.lower = extreme.threshold.lower, extreme.threshold.upper = extreme.threshold.upper)
# Identify outlier
results$ind.stats$fence <- sapply(results$ind.stats$delta, function(x){
if ((x < extreme.threshold.lower) | (x > extreme.threshold.upper)) {
return("extreme")
} else if ((x < mild.threshold.lower) | (x > mild.threshold.upper)) {
return("mild")
} else {
return("none")
}
})
# Make the fence variable a factor
results$ind.stats$fence <- factor(results$ind.stats$fence, levels = c("extreme", "mild", "none"))
# Make test vectors
# results$ind.stats$tukey.mild <- ifelse(results$ind.stats$fence %in% c("mild", "extreme"), TRUE, FALSE)
results$ind.stats$tukey.mild <- ifelse((results$ind.stats$fence %in% c("mild", "extreme")) & (results$ind.stats$delta < 0), TRUE, FALSE)
results$ind.stats$tukey.extreme <- ifelse((results$ind.stats$fence %in% c("extreme")) & (results$ind.stats$delta < 0), TRUE, FALSE)
# Return thresholds
return(results)
}
#' Function to calculate MAD and call influential variants
#'
#' This function takes in the results list object from calculateDelta_SKAT0()
#'
#' @export
# Function to calculate MAD
calculateMAD <- function(results, cutoff = 3, constant = 1.4826){
# Extract full parameter
full_delta <- results$ind.stats$delta[results$ind.stats$SNP_excluded == "NONE"]
# Extract jackknife etsimates
ind_delta <- results$ind.stats$delta[results$ind.stats$SNP_excluded != "NONE"]
n <- length(ind_delta)
# Calculate MAD
results$mad$mad <- mad(ind_delta, constant = constant)
results$mad$cutoff <- cutoff
results$ind.stats$mad.dev <- c(0, (abs(ind_delta - median(ind_delta))/results$mad$mad))
# Determine if deviation is larger than cutoff
results$ind.stats$mad.outlier <- ifelse(results$ind.stats$mad.dev > cutoff & results$ind.stats$delta < 0, TRUE, FALSE)
# Resort results
results$ind.stats <- arrange(results$ind.stats, SNP_idx)
# Return plot
return(results)
}
# Calculate delta chi-square
results <- calculateDelta_SKAT0(y, geno.mat = geno)
# Call influential variants using Tukey Fences
results <- calculateTukeyFences(results)
# Call influential variants using MAD
results <- calculateMAD(results)
# Print IV
results$ind.stats[results$ind.stats$tukey.mild,]
plot.chi <- plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$chisq)
plot.chi
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, col = results$ind.stats$tukey.mild)
abline(h = 0, col = "red")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, shape = results$ind.stats$tukey.mild)
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, pch = results$ind.stats$tukey.mild)
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, pch = as.numeric(results$ind.stats$tukey.mild))
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, pch = c(16, 17)[as.numeric(results$ind.stats$tukey.mild)])
results$ind.stats$tukey.mild)
results$ind.stats$tukey.mild
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, pch = c(16, 17)[as.factor(results$ind.stats$tukey.mild)])
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, col = c(16, 17)[as.factor(results$ind.stats$tukey.mild)])
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, col = as.factor(results$ind.stats$tukey.mild))
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, col = "red")
abline(h = 0, col = "red")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, cols = "red")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, col = "red")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, type = "m")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, type = "n")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, type = "n")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, type = "n")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, type = "n", pch = 19)
plot(delta ~ SNP_excluded, data = results$ind.stats)
plot(delta ~ SNP_excluded, data = results$ind.stats, pch 19)
plot(delta ~ SNP_excluded, data = results$ind.stats, pch = 19)
plot(delta ~ SNP_excluded, data = results$ind.stats, col = 5)
plot(chisq ~ SNP_excluded, data = results$ind.stats, col = 5)
plot(chisq ~ factor(SNP_excluded), data = results$ind.stats, col = 5)
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, type = "p")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, type = "p", col = "red")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, type ="n")
str(results$ind.stats)
plot(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, type ="n")
as.numeric(results$ind.stats$tukey.mild_
as.numeric(results$ind.stats$tukey.mild)
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, col = as.numeric(results$ind.stats$tukey.mild))
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = as.numeric(results$ind.stats$tukey.mild))
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.numeric(results$ind.stats$tukey.mild)])
c("black", "red")[as.numeric(results$ind.stats$tukey.mild)]
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")*[as.numeric(results$ind.stats$tukey.mild)])
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)])
ylab = "Delta chi-square")
xlab("SNP")
axis(1, labels = results$ind.stats$SNP_excluded)
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded)
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2)
plotDeltaTukey <- function(results){
d.plot <- plot(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, type ="n")
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)], xlab = "Variant", ylab = "Delta Chi-Square")
abline(h = 0, col = "red")
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2)
print(d.plot)
return(d.plot)
}
plotDeltaTukey(results)
d.plot <- plot(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, type ="n")
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)], xlab = "Variant", ylab = "Delta Chi-Square")
abline(h = 0, col = "red")
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2)
d.plot
plotDeltaTukey <- function(results){
plot(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, type ="n")
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)], xlab = "Variant", ylab = "Delta Chi-Square")
abline(h = 0, col = "red")
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2)
}
plotDeltaTukey(results)
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)], xlab = "Variant", ylab = "Delta Chi-Square", xaxt='n', ann=FALSE)
plot(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, type ="n", xaxt='n', ann=FALSE)
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)], xlab = "Variant", ylab = "Delta Chi-Square")
abline(h = 0, col = "red")
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2)
c("black", "red")[as.factor(results$ind.stats$tukey.mild)]
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2, c("black", "red")[as.factor(results$ind.stats$tukey.mild)])
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)])
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)])
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)], xlab = "Variant", ylab = "Delta Chi-Square")
abline(h = 0, col = "red")
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)])
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2, col = "red")
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2, col.axis = c("black", "red")[as.factor(results$ind.stats$tukey.mild)])
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2)
# Plot results
plotDeltaTukey(results)
# Plot results
plotDeltaTukey(results)
plotDeltaTukey <- function(results){
plot(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, type ="n", xaxt='n', ann=FALSE)
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)], xlab = "Variant", ylab = "Delta Chi-Square")
abline(h = 0, col = "red")
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2)
}
# Plot results
plotDeltaTukey(results)
# read in example dataset
raw_dat <- read.table("example_data.txt")
head(raw_dat)
raw_dat$SEX <- sample(c(1:2), size = 2000, replace = TRUE)
head(raw_dat)
raw_dat <- raw_dat[,c(1,45,2:44)]
head(raw_dat)
example_dat <- raw_dat
save(example_dat, file="data/example_dat.RData")
# Outcome should be binary, coded as 0/1
y <- raw_dat$PHENOTYPE - 1
# Create genotype matrix
geno <- as.matrix(raw_dat[,-1])
# Calculate delta chi-square
results <- calculateDelta_SKAT0(y, geno.mat = geno)
# Call influential variants using Tukey Fences
results <- calculateTukeyFences(results)
# Call influential variants using MAD
results <- calculateMAD(results)
# Print IV
results$ind.stats[results$ind.stats$tukey.mild,]
# Plot results
plotDeltaTukey(results)
example
test.dat
exampleData <- example_dat
save(exampleData, file="data/exampleData.RData")
head(exampleData)
devtools::load_all()
devtools::load_all()
# read in example dataset
data(exampleData)
# Outcome should be binary, coded as 0/1
y <- exampleData$PHENOTYPE - 1
# Create genotype matrix
geno <- as.matrix(exampleData[,-c(1;2)])
# Create genotype matrix
geno <- as.matrix(exampleData[,-c(1:2)])
# Create covariate matrix
cov <- as.matrix(exampleData$SEX)
# Calculate delta chi-square
results <- calculateDelta_SKAT0(y, geno.mat = geno, cov.mat = cov)
# Call influential variants using Tukey Fences
results <- calculateTukeyFences(results)
# Call influential variants using MAD
results <- calculateMAD(results)
# Print IV
results$ind.stats[results$ind.stats$tukey.mild,]
# Plot results
plotDeltaTukey(results)
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::build()
library(devtools)
install_github("rachelzoeb/RIFT")
library(RIFT)
?data
?RIFT
??RIFT
library(RIFT)
data(exampleData)
y <- exampleData$PHENOTYPE - 1
geno <- as.matrix(exampleData[,-c(1,2)])
cov <- as.matrix(exampleData$SEX)
## Format input
SNPS <- colnames(geno.mat)
y
geno.mat=geno
## Format input
SNPS <- colnames(geno.mat)
SNPS
## format outcome
y <- factor(y, levels = c(0,1))
y
library(randomForest)
if (requireNamespace("randomForest", quietly = TRUE)) {
# do your plotly stuff
} else {
# do non-plotly stuff
stop("Please install randomForest to use this function")
}
geno.mat
## Format input
SNPS <- colnames(geno.mat)
## format outcome
y <- factor(y, levels = c(0,1))
vars <- c("y", SNPS)
form <- formula("y ~ .")
## Run standard random forest function
rf_default <- randomForest(form, data = data.frame(y, geno.mat), importance = TRUE, proximity = TRUE)
rf_default$importance
SNPS
calculateRF <- function(y, geno.mat){
if (requireNamespace(c("randomForest", "viRandomForests"), quietly = TRUE)) {
## Format input
SNPS <- colnames(geno.mat)
## format outcome
y <- factor(y, levels = c(0,1))
vars <- c("y", SNPS)
form <- formula("y ~ .")
## Run standard random forest function
rf_default <- randomForest(form, data = data.frame(y, geno.mat), importance = TRUE, proximity = TRUE)
## Run default viRandomForest function
virf_default <- viRandomForests(form, data = data.frame(y, geno.mat), importance = TRUE, proximity=TRUE)
## Return results
return(list(rf = rf_default$importance,
virf = virf_default$importance))
} else {
# provide warning to install packaged
stop("Please install randomForest and viRandomForests to use this function")
}
}
res <- calculateRF(y, geno.mat)
calculateRF <- function(y, geno.mat){
if (requireNamespace("randomForest", quietly = TRUE) & requireNamespace("viRandomForests", quietly = TRUE)) {
## Format input
SNPS <- colnames(geno.mat)
## format outcome
y <- factor(y, levels = c(0,1))
vars <- c("y", SNPS)
form <- formula("y ~ .")
## Run standard random forest function
rf_default <- randomForest(form, data = data.frame(y, geno.mat), importance = TRUE, proximity = TRUE)
## Run default viRandomForest function
virf_default <- viRandomForests(form, data = data.frame(y, geno.mat), importance = TRUE, proximity=TRUE)
## Return results
return(list(rf = rf_default$importance,
virf = virf_default$importance))
} else {
# provide warning to install packaged
stop("Please install randomForest and viRandomForests to use this function")
}
}
res <- calculateRF(y, geno.mat)
requireNamespace("viRandomForests", quietly = TRUE)
if(requireNamespace("viRandomForests", quietly = TRUE))
(requireNamespace("randomForest", quietly = TRUE)
)
(requireNamespace("viRandomForests", quietly = TRUE))
library(viRandomForests)
calculateRF <- function(y, geno.mat){
if (requireNamespace("randomForest", quietly = TRUE) & requireNamespace("viRandomForests", quietly = TRUE)) {
## Format input
SNPS <- colnames(geno.mat)
## format outcome
y <- factor(y, levels = c(0,1))
vars <- c("y", SNPS)
form <- formula("y ~ .")
## Run standard random forest function
rf_default <- randomForest(form, data = data.frame(y, geno.mat), importance = TRUE, proximity = TRUE)
## Run default viRandomForest function
virf_default <- viRandomForests(form, data = data.frame(y, geno.mat), importance = TRUE, proximity=TRUE)
## Return results
return(list(rf = rf_default$importance,
virf = virf_default$importance))
} else {
# provide warning to install packaged
stop("Please install randomForest and viRandomForests to use this function")
}
}
res <- calculateRF(y, geno.mat)
res$rf
res$virf
## Apply tukey to results
names(rf_default$importance)
## Apply tukey to results
rf_default$importance
rf_default <- data.frame(rf_default$importance)
virf_default <- data.frame(virf_default$importance)
virf_default <- viRandomForests(form, data = data.frame(y, geno.mat), importance = TRUE, proximity=TRUE)
virf_default <- data.frame(virf_default$importance)
## Apply tukey to results
rf_default$MeanDecreaseAccuracy.tukey <- tukey_mild_outlier(rf_default$MeanDecreaseAccuracy)
####**********  Function to call IV using Tukey Mild criteria
tukey_mild_outlier <- function(x){
# Extract jackknife etsimates
n <- length(x)
# Calculate IQR and quantiles
lowerq = quantile(x)[2]
upperq = quantile(x)[4]
iqr = upperq - lowerq
# Compute bounds for inner fences
mild.threshold.upper = (iqr * 1.5) + upperq
mild.threshold.lower = lowerq - (iqr * 1.5)
# Compute bounds for outer fences
extreme.threshold.upper = (iqr * 3) + upperq
extreme.threshold.lower = lowerq - (iqr * 3)
# Identify outlier
fence <- sapply(x, function(y){
if ((y < extreme.threshold.lower) | (y > extreme.threshold.upper)) {
return("extreme")
} else if ((y < mild.threshold.lower) | (y > mild.threshold.upper)) {
return("mild")
} else {
return("none")
}
})
# Make the fence variable a factor
fence <- factor(fence, levels = c("extreme", "mild", "none"))
# Make test vectors
return(ifelse((fence %in% c("mild", "extreme")), TRUE, FALSE))
}
## Apply tukey to results
rf_default$MeanDecreaseAccuracy.tukey <- tukey_mild_outlier(rf_default$MeanDecreaseAccuracy)
rf_default$MeanDecreaseAccuracy.tukey <- tukey_mild_outlier(rf_default$MeanDecreaseAccuracy)
rf_default$MeanDecreaseAccuracy.tukey <- tukey_mild_outlier(rf_default$MeanDecreaseAccuracy)
## Apply tukey to vi-RF results
virf_default$MeanDecreaseAccuracy.tukey <- tukey_mild_outlier(virf_default$MeanDecreaseAccuracy)
virf_default$MeanDecreaseAccuracy.tukey <- tukey_mild_outlier(virf_default$MeanDecreaseAccuracy)
## Return results
return(list(rf = rf_default,
virf = virf_default))
rf_default
rf_default$MeanDecreaseAccuracy.tukey <- tukey_mild_outlier(rf_default$MeanDecreaseAccuracy)
rf_default$MeanDecreaseGini.tukey <- tukey_mild_outlier(rf_default$MeanDecreaseGini)
## Apply tukey to vi-RF results
virf_default$MeanDecreaseAccuracy.tukey <- tukey_mild_outlier(virf_default$MeanDecreaseAccuracy)
virf_default$MeanDecreaseGini.tukey <- tukey_mild_outlier(virf_default$MeanDecreaseGini)
rf_De
rf_default
virf_default
calculateRF <- function(y, geno.mat){
if (requireNamespace("randomForest", quietly = TRUE) & requireNamespace("viRandomForests", quietly = TRUE)) {
## Format input
SNPS <- colnames(geno.mat)
## format outcome
y <- factor(y, levels = c(0,1))
vars <- c("y", SNPS)
form <- formula("y ~ .")
## Run standard random forest function
rf_default <- randomForest(form, data = data.frame(y, geno.mat), importance = TRUE, proximity = TRUE)
rf_default <- data.frame(rf_default$importance)
## Run default viRandomForest function
virf_default <- viRandomForests(form, data = data.frame(y, geno.mat), importance = TRUE, proximity=TRUE)
virf_default <- data.frame(virf_default$importance)
#####**********  Function to call IV using Tukey Mild criteria
tukey_mild_outlier <- function(x){
# Extract jackknife etsimates
n <- length(x)
# Calculate IQR and quantiles
lowerq = quantile(x)[2]
upperq = quantile(x)[4]
iqr = upperq - lowerq
# Compute bounds for inner fences
mild.threshold.upper = (iqr * 1.5) + upperq
mild.threshold.lower = lowerq - (iqr * 1.5)
# Compute bounds for outer fences
extreme.threshold.upper = (iqr * 3) + upperq
extreme.threshold.lower = lowerq - (iqr * 3)
# Identify outlier
fence <- sapply(x, function(y){
if ((y < extreme.threshold.lower) | (y > extreme.threshold.upper)) {
return("extreme")
} else if ((y < mild.threshold.lower) | (y > mild.threshold.upper)) {
return("mild")
} else {
return("none")
}
})
# Make the fence variable a factor
fence <- factor(fence, levels = c("extreme", "mild", "none"))
# Make test vectors
return(ifelse((fence %in% c("mild", "extreme")), TRUE, FALSE))
}
## Apply tukey to RF results
rf_default$MeanDecreaseAccuracy.tukey <- tukey_mild_outlier(rf_default$MeanDecreaseAccuracy)
rf_default$MeanDecreaseGini.tukey <- tukey_mild_outlier(rf_default$MeanDecreaseGini)
## Apply tukey to vi-RF results
virf_default$MeanDecreaseAccuracy.tukey <- tukey_mild_outlier(virf_default$MeanDecreaseAccuracy)
virf_default$MeanDecreaseGini.tukey <- tukey_mild_outlier(virf_default$MeanDecreaseGini)
## Return results
return(list(rf = rf_default,
virf = virf_default))
} else {
# provide warning to install packaged
stop("Please install randomForest and viRandomForests to use this function")
}
}
res <- calculateRF(y, geno)
res$rf
results <- res
results$rf[results$rf$MeanDecreaseAccuracy.tukey,]
toptable <- read.csv(file = "random_forest/ipf_reseq/allRegions_noMissing_noCovariates_noGilead_viRandomForest_allVariants.csv")
######################################################################################################
#     Localization_TERT.R
#     Date created August 14, 2018
#
#     This script is to use the rare variant data from one gene (TERT) from the IPF resequencing study to explore potential localization approaches
#
#     Last updated - August 14, 2018
######################################################################################################
options(stringsAsFactors = F)
# library loads
library(dplyr)
library(tidyr)
library(SKAT)
library(ggplot2)
library(randomForest)
library(viRandomForests)
library(RColorBrewer)
library(RIFT)
# Set up working directory
# PROJECT PATH
proj_path <- "../phd_work/localization/"
# HOME
#compbio <-"/Users/rachelblumhagen/Projects/NJ/"
# WORK
compbio <-"/Users/blumhagenr/Projects/NJ/"
#
# # Set working directory
compbio_path <- paste(compbio, proj_path, sep = "")
setwd(compbio_path)
# toptable <- read.csv("random_forest/ipf_reseq/allRegions_noMissing_noCovariates_viRandomForest_GiniTukeyTrue.csv")
# chr13_top <- subset(toptable, region %in% c("chr13-113.768"))
#
# ## remove duplicates
# #fam13A_top <- fam13A_top[!duplicated(fam13A_top$vars),]
# write.csv(chr13_top, file = "random_forest/ipf_reseq/chr13_noMissing_noCovariates_viRandomForest_GiniTukeyTrue.csv")
#
# ################################# SUBSET TO RF PAPER VARIANTS
#
#toptable <- read.csv("random_forest/ipf_reseq/allRegions_noMissing_noCovariates_viRandomForest_GiniTukeyTrue.csv")
toptable <- read.csv(file = "random_forest/ipf_reseq/allRegions_noMissing_noCovariates_noGilead_viRandomForest_allVariants.csv")
rfpaper_top <- subset(toptable, region %in% c("chr5-1.168", "chr4-89.138"))
# toptable <- read.csv("random_forest/ipf_reseq/allRegions_noMissing_noCovariates_viRandomForest_GiniTukeyTrue.csv")
# chr13_top <- subset(toptable, region %in% c("chr13-113.768"))
#
# ## remove duplicates
# #fam13A_top <- fam13A_top[!duplicated(fam13A_top$vars),]
# write.csv(chr13_top, file = "random_forest/ipf_reseq/chr13_noMissing_noCovariates_viRandomForest_GiniTukeyTrue.csv")
#
# ################################# SUBSET TO RF PAPER VARIANTS
#
#toptable <- read.csv("random_forest/ipf_reseq/allRegions_noMissing_noCovariates_viRandomForest_GiniTukeyTrue.csv")
toptable <- read.csv(file = "random_forest/ipf_reseq/allRegions_noMissing_noCovariates_noGilead_viRandomForest_allVariants.csv")
View(toptable)
names(toptable)
#rfpaper_top <- subset(toptable, region %in% c("chr5-1.168", "chr4-89.138"))
rfpaper_top <- subset(toptable, iv.accuracy_pos == TRUE | rf.iv.acc_pos == TRUE | tukey.mild == TRUE)
View(rfpaper_top)
#write.csv(toptable[,c("SNP", "chr", "phy_pos")], file = "random_forest/ipf_reseq/RFpaper_all_variants_chr_pos.csv")
write.csv(rfpaper_top[,c("SNP", "chr", "phy_pos", "snpFunction", "iv.accuracy_pos", "rf.iv.acc_pos", "tukey.mild")], file = "random_forest/ipf_reseq/RFpaper_top_variants_chr_pos.csv")
#write.csv(toptable[,c("SNP", "chr", "phy_pos")], file = "random_forest/ipf_reseq/RFpaper_all_variants_chr_pos.csv")
write.csv(rfpaper_top[,c("SNP", "chr", "phy_pos", "snpFunction", "tukey.mild", "rf.iv.gini", "rf.iv.acc_pos", "iv.gini", "iv.accuracy_pos")], file = "random_forest/ipf_reseq/RFpaper_top_variants_chr_pos.csv")
toptable <- read.csv(file = "random_forest/ipf_reseq/allRegions_noMissing_noCovariates_noGilead_viRandomForest_allVariants.csv")
#rfpaper_top <- subset(toptable, region %in% c("chr5-1.168", "chr4-89.138"))
rfpaper_top <- subset(toptable, tukey.mild == TRUE | rf.iv.gini == TRUE | iv.gini == TRUE | rf.iv.acc_pos == TRUE | iv.accuracy_pos == TRUE)
#write.csv(toptable[,c("SNP", "chr", "phy_pos")], file = "random_forest/ipf_reseq/RFpaper_all_variants_chr_pos.csv")
write.csv(rfpaper_top[,c("SNP", "chr", "phy_pos", "snpFunction", "tukey.mild", "rf.iv.gini", "rf.iv.acc_pos", "iv.gini", "iv.accuracy_pos")], file = "random_forest/ipf_reseq/RFpaper_top_variants_chr_pos.csv")

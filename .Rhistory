# read in example dataset
raw_dat <- read.table("example_data.txt")
# Outcome should be binary, coded as 0/1
y <- raw_dat$PHENOTYPE - 1
# Create genotype matrix
geno <- as.matrix(raw_dat[,-1])
# Calculate delta chi-square
results <- calculateDelta_SKAT0(y, geno.mat = geno)
# Call influential variants using Tukey Fences
results <- calculateTukeyFences(results)
# Call influential variants using MAD
results <- calculateMAD(results)
# Print IV
results$ind.stats[results$ind.stats$tukey.mild,]
#' Function to calculate delta chi-square scores based on SKAT-O (Step 1 of RIFT)
#'
#' This function takes in y (phenotype), x (genotype matrix) and cov (covariate matrix)
#'
#' @export
calculateDelta_SKAT0 <- function(y, geno.mat, cov.mat = NULL){
## Load functions
require(SKAT)
require(dplyr)
## Format input
SNPS <- colnames(geno.mat)
if (is.null(cov.mat) == TRUE){
obj <- SKAT_Null_Model(y ~ 1, out_type = "D", Adjustment = FALSE)
} else {
obj <- SKAT_Null_Model(y ~ as.matrix(cov.mat), out_type = "D", Adjustment = FALSE)
}
## Create dataframe to hold results
res <- NULL
## Loop through to remove one SNPS and re-run SKAT, saving results in iterative_results dataframe
for (idx in c(0:dim(geno.mat)[2])){
## Set up genotype data to remove 0 or 1 snps
if (idx == 0){
GENO_sub <- geno.mat
SNP_excluded <- "NONE"
## Run SKATO to find optimal parameter
out_skato <- SKAT(GENO_sub, obj, method = "optimal.adj")
rho_est <- out_skato$param$rho_est
pval_rho <- out_skato$param$minp
} else {
## print which SNP has been calculating
print(paste0("Computing p-value for SNP #", idx))
GENO_sub <- geno.mat[,-idx]
SNP_excluded <- SNPS[idx]
## Run SKATO with rho from entire data
out_skato <- SKAT(GENO_sub, obj, r.corr = rho_est)
pval_rho <- out_skato$p.value
}
## Save results to dataframe
res <- rbind(data.frame(SNP_idx = idx, SNP_excluded = SNP_excluded, p.value = pval_rho, rho_est = rho_est), res)
}
## Calculate Chi-Square statistics
print("Computing chi-square statistics")
res$chisq <- sapply(res$p.value, FUN = function(x){return(qchisq(x, df = 1, lower.tail = FALSE))})
## Calculate delta Chi-Square statistics
print("Computing delta chi-square statistics")
res$delta <- sapply(res$chisq, FUN = function(x){return(x - res$chisq[res$SNP_excluded == "NONE"])})
## Resort results
res <- arrange(res, SNP_idx)
## Return results
return(list(ind.stats = res))
}
#' Function to calculate Tukey Fences and call influential variants
#'
#' This function takes in the results list object from calculateDelta_SKAT0()
#'
#' @export
calculateTukeyFences <- function(results){
# Extract full parameter
full_delta <- results$ind.stats$delta[results$ind.stats$SNP_excluded == "NONE"]
# Extract jackknife etsimates
ind_delta <- results$ind.stats$delta[results$ind.stats$SNP_excluded != "NONE"]
n <- length(ind_delta)
# Calculate IQR and quantiles
lowerq = quantile(ind_delta)[2]
upperq = quantile(ind_delta)[4]
iqr = upperq - lowerq
# Compute bounds for inner fences
mild.threshold.upper = (iqr * 1.5) + upperq
mild.threshold.lower = lowerq - (iqr * 1.5)
# Compute bounds for outer fences
extreme.threshold.upper = (iqr * 3) + upperq
extreme.threshold.lower = lowerq - (iqr * 3)
# Save thresholds
results$iqr <- list(iqr = iqr, lowerq = lowerq, upperq = upperq,
mild.threshold.lower = mild.threshold.lower, mild.threshold.upper = mild.threshold.upper,
extreme.threshold.lower = extreme.threshold.lower, extreme.threshold.upper = extreme.threshold.upper)
# Identify outlier
results$ind.stats$fence <- sapply(results$ind.stats$delta, function(x){
if ((x < extreme.threshold.lower) | (x > extreme.threshold.upper)) {
return("extreme")
} else if ((x < mild.threshold.lower) | (x > mild.threshold.upper)) {
return("mild")
} else {
return("none")
}
})
# Make the fence variable a factor
results$ind.stats$fence <- factor(results$ind.stats$fence, levels = c("extreme", "mild", "none"))
# Make test vectors
# results$ind.stats$tukey.mild <- ifelse(results$ind.stats$fence %in% c("mild", "extreme"), TRUE, FALSE)
results$ind.stats$tukey.mild <- ifelse((results$ind.stats$fence %in% c("mild", "extreme")) & (results$ind.stats$delta < 0), TRUE, FALSE)
results$ind.stats$tukey.extreme <- ifelse((results$ind.stats$fence %in% c("extreme")) & (results$ind.stats$delta < 0), TRUE, FALSE)
# Return thresholds
return(results)
}
#' Function to calculate MAD and call influential variants
#'
#' This function takes in the results list object from calculateDelta_SKAT0()
#'
#' @export
# Function to calculate MAD
calculateMAD <- function(results, cutoff = 3, constant = 1.4826){
# Extract full parameter
full_delta <- results$ind.stats$delta[results$ind.stats$SNP_excluded == "NONE"]
# Extract jackknife etsimates
ind_delta <- results$ind.stats$delta[results$ind.stats$SNP_excluded != "NONE"]
n <- length(ind_delta)
# Calculate MAD
results$mad$mad <- mad(ind_delta, constant = constant)
results$mad$cutoff <- cutoff
results$ind.stats$mad.dev <- c(0, (abs(ind_delta - median(ind_delta))/results$mad$mad))
# Determine if deviation is larger than cutoff
results$ind.stats$mad.outlier <- ifelse(results$ind.stats$mad.dev > cutoff & results$ind.stats$delta < 0, TRUE, FALSE)
# Resort results
results$ind.stats <- arrange(results$ind.stats, SNP_idx)
# Return plot
return(results)
}
# Calculate delta chi-square
results <- calculateDelta_SKAT0(y, geno.mat = geno)
# Call influential variants using Tukey Fences
results <- calculateTukeyFences(results)
# Call influential variants using MAD
results <- calculateMAD(results)
# Print IV
results$ind.stats[results$ind.stats$tukey.mild,]
plot.chi <- plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$chisq)
plot.chi
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, col = results$ind.stats$tukey.mild)
abline(h = 0, col = "red")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, shape = results$ind.stats$tukey.mild)
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, pch = results$ind.stats$tukey.mild)
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, pch = as.numeric(results$ind.stats$tukey.mild))
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, pch = c(16, 17)[as.numeric(results$ind.stats$tukey.mild)])
results$ind.stats$tukey.mild)
results$ind.stats$tukey.mild
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, pch = c(16, 17)[as.factor(results$ind.stats$tukey.mild)])
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, col = c(16, 17)[as.factor(results$ind.stats$tukey.mild)])
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, col = as.factor(results$ind.stats$tukey.mild))
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, col = "red")
abline(h = 0, col = "red")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, cols = "red")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, col = "red")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, type = "m")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, type = "n")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, type = "n")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, type = "n")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, type = "n", pch = 19)
plot(delta ~ SNP_excluded, data = results$ind.stats)
plot(delta ~ SNP_excluded, data = results$ind.stats, pch 19)
plot(delta ~ SNP_excluded, data = results$ind.stats, pch = 19)
plot(delta ~ SNP_excluded, data = results$ind.stats, col = 5)
plot(chisq ~ SNP_excluded, data = results$ind.stats, col = 5)
plot(chisq ~ factor(SNP_excluded), data = results$ind.stats, col = 5)
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, type = "p")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, type = "p", col = "red")
plot(x = results$ind.stats$SNP_excluded, y = results$ind.stats$delta, type ="n")
str(results$ind.stats)
plot(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, type ="n")
as.numeric(results$ind.stats$tukey.mild_
as.numeric(results$ind.stats$tukey.mild)
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, col = as.numeric(results$ind.stats$tukey.mild))
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = as.numeric(results$ind.stats$tukey.mild))
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.numeric(results$ind.stats$tukey.mild)])
c("black", "red")[as.numeric(results$ind.stats$tukey.mild)]
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")*[as.numeric(results$ind.stats$tukey.mild)])
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)])
ylab = "Delta chi-square")
xlab("SNP")
axis(1, labels = results$ind.stats$SNP_excluded)
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded)
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2)
plotDeltaTukey <- function(results){
d.plot <- plot(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, type ="n")
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)], xlab = "Variant", ylab = "Delta Chi-Square")
abline(h = 0, col = "red")
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2)
print(d.plot)
return(d.plot)
}
plotDeltaTukey(results)
d.plot <- plot(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, type ="n")
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)], xlab = "Variant", ylab = "Delta Chi-Square")
abline(h = 0, col = "red")
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2)
d.plot
plotDeltaTukey <- function(results){
plot(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, type ="n")
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)], xlab = "Variant", ylab = "Delta Chi-Square")
abline(h = 0, col = "red")
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2)
}
plotDeltaTukey(results)
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)], xlab = "Variant", ylab = "Delta Chi-Square", xaxt='n', ann=FALSE)
plot(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, type ="n", xaxt='n', ann=FALSE)
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)], xlab = "Variant", ylab = "Delta Chi-Square")
abline(h = 0, col = "red")
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2)
c("black", "red")[as.factor(results$ind.stats$tukey.mild)]
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2, c("black", "red")[as.factor(results$ind.stats$tukey.mild)])
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)])
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)])
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)], xlab = "Variant", ylab = "Delta Chi-Square")
abline(h = 0, col = "red")
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)])
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2, col = "red")
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2, col.axis = c("black", "red")[as.factor(results$ind.stats$tukey.mild)])
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2)
# Plot results
plotDeltaTukey(results)
# Plot results
plotDeltaTukey(results)
plotDeltaTukey <- function(results){
plot(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, type ="n", xaxt='n', ann=FALSE)
points(x = results$ind.stats$SNP_idx, y = results$ind.stats$delta, pch = 19, col = c("black", "red")[as.factor(results$ind.stats$tukey.mild)], xlab = "Variant", ylab = "Delta Chi-Square")
abline(h = 0, col = "red")
axis(1, at = results$ind.stats$SNP_idx, labels = results$ind.stats$SNP_excluded, las = 2)
}
# Plot results
plotDeltaTukey(results)
# read in example dataset
raw_dat <- read.table("example_data.txt")
head(raw_dat)
raw_dat$SEX <- sample(c(1:2), size = 2000, replace = TRUE)
head(raw_dat)
raw_dat <- raw_dat[,c(1,45,2:44)]
head(raw_dat)
example_dat <- raw_dat
save(example_dat, file="data/example_dat.RData")
# Outcome should be binary, coded as 0/1
y <- raw_dat$PHENOTYPE - 1
# Create genotype matrix
geno <- as.matrix(raw_dat[,-1])
# Calculate delta chi-square
results <- calculateDelta_SKAT0(y, geno.mat = geno)
# Call influential variants using Tukey Fences
results <- calculateTukeyFences(results)
# Call influential variants using MAD
results <- calculateMAD(results)
# Print IV
results$ind.stats[results$ind.stats$tukey.mild,]
# Plot results
plotDeltaTukey(results)
example
test.dat
exampleData <- example_dat
save(exampleData, file="data/exampleData.RData")
head(exampleData)
devtools::load_all()
devtools::load_all()
# read in example dataset
data(exampleData)
# Outcome should be binary, coded as 0/1
y <- exampleData$PHENOTYPE - 1
# Create genotype matrix
geno <- as.matrix(exampleData[,-c(1;2)])
# Create genotype matrix
geno <- as.matrix(exampleData[,-c(1:2)])
# Create covariate matrix
cov <- as.matrix(exampleData$SEX)
# Calculate delta chi-square
results <- calculateDelta_SKAT0(y, geno.mat = geno, cov.mat = cov)
# Call influential variants using Tukey Fences
results <- calculateTukeyFences(results)
# Call influential variants using MAD
results <- calculateMAD(results)
# Print IV
results$ind.stats[results$ind.stats$tukey.mild,]
# Plot results
plotDeltaTukey(results)
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::build()
library(devtools)
install_github("rachelzoeb/RIFT")
library(RIFT)
?data
?RIFT
??RIFT
